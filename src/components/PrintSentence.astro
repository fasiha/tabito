---
export const prerender = true;

import { Sentence } from "./solid/Sentence";
import { loadSentence } from "../utils/loadSentence";
import type { Furigana as FuriganaType } from "curtiz-japanese-nlp";
import type { AnnotatedSentence, GrammarConj, Vocab } from "../interfaces/backend";
import { hasKanji } from "curtiz-utils";
import { furiganaSlice, minBy, plainToFurigana, prefixNumber } from "../utils/utils";
import { Furigana } from "./solid/Furigana";
import { GrammarConjPicked } from "./solid/GrammarConjPicked";

interface Props {
  plain: string;
  d: string;
  justFurigana?: boolean;
}

const { plain, d: docName, justFurigana } = Astro.props;
const sentence = await loadSentence({ plain, docName });

const vocabToHead = (vocab: Vocab, plain: string, furigana: AnnotatedSentence["furigana"]): FuriganaType[] => {
  const snippet = plain.slice(vocab.start, vocab.start + vocab.len);
  const snippetKanji = snippet.split("").filter(hasKanji);

  if (snippetKanji.length) {
    const bestKanji = minBy(vocab.entry.kanji, (k) => {
      const headKanji = k.text.split("").filter(hasKanji);
      const missing = snippetKanji.filter((s) => !k.text.includes(s));
      const extra = headKanji.filter((s) => !snippetKanji.includes(s));
      return missing.length + extra.length;
    });

    if (bestKanji) {
      const furiSlice = furiganaSlice(furigana, vocab.start, vocab.len);
      return plainToFurigana(bestKanji.text, furiSlice);
    }
  }

  const bestReading = minBy(vocab.entry.kana, (k) => {
    const extra = k.text.split("").filter((s) => !snippet.includes(s));
    const misising = snippet.split("").filter((s) => !k.text.includes(s));
    return extra.length + misising.length;
  });
  if (bestReading) return [bestReading.text];

  return [snippet];
};

const isVocab = (v: Vocab | GrammarConj): v is Vocab => "entry" in v;
---

<style>
  @media print {
    li {
      break-inside: avoid;
    }
  }
</style>

<h3>{sentence ? <Sentence sentence={sentence} /> : plain}</h3>

{
  !justFurigana && (sentence?.vocab?.length || sentence?.grammarConj?.length) && (
    <ul>
      {[...(sentence?.vocab ?? []), ...(sentence?.grammarConj ?? [])]
        .sort((a, b) => a.start - b.start)
        .map((v) =>
          isVocab(v) ? (
            <li>
              <Furigana furigana={vocabToHead(v, plain, sentence.furigana)} />{" "}
              {v.senses.map(({ sense: si, subsense: subi }) => {
                if (typeof subi !== "number")
                  return (
                    <span>
                      {prefixNumber(si)}
                      {v.entry.sense[si].gloss.map((g, gi) => (
                        <span>
                          <sup>{prefixNumber(gi)}</sup> {g.text}{" "}
                        </span>
                      ))}
                    </span>
                  );

                return (
                  <span>
                    {prefixNumber(si)}
                    <sup>{prefixNumber(subi)}</sup> {v.entry.sense[si].gloss[subi].text}
                  </span>
                );
              })}
            </li>
          ) : (
            <li>
              <GrammarConjPicked
                client:only="solid-js"
                lemmas={v.lemmas}
                deconj={v.deconj}
                relevantFurigana={furiganaSlice(sentence.furigana, v.start, v.len)}
              />
            </li>
          )
        )}
    </ul>
  )
}
