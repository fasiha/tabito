---
export const prerender = true;

import "../styles/editor.css";

import type { Word } from "curtiz-japanese-nlp/interfaces";
import { enrollSentenceIntoDoc, getSentence, upsertSentence } from "../db";
import { analyzeString, jmdictSeqsToWords } from "../nlp-wrappers/curtiz";
import { rawToIchiran } from "../nlp-wrappers/ichiran";
import { Sentence } from "./Sentence";
import { SentenceAnnotations } from "./SentenceAnnotations";
import type { Sentence as SentenceType } from "../interfaces/backend";

interface Props {
  plain: string;
  docName: string;
}

const { plain, docName } = Astro.props;

enrollSentenceIntoDoc(plain, docName);
const existing = getSentence(plain);
if (existing === undefined || (typeof existing === "object" && !existing.nlp)) {
  const curtiz = await analyzeString(plain);
  const { ichiran, jmdictSeqs, seqMap } = await rawToIchiran(plain);
  const words = Object.fromEntries(
    (await jmdictSeqsToWords(jmdictSeqs))
      .filter((x): x is Word => !!x)
      .map((w) => [w.id, w])
  );

  {
    const moreSeqs = jmdictSeqs.filter((x) => !(x in words) && x in seqMap);
    const moreWords = await jmdictSeqsToWords(moreSeqs.map((x) => seqMap[x]));
    for (const [idx, w] of moreWords.entries()) {
      if (w) {
        // we know we're not overwriting anything here because `w.id` isn't in `words` by construction
        words[moreSeqs[idx]] = w;
      }
    }
  }

  const furigana =
    typeof curtiz === "string" ? [curtiz] : curtiz.furigana.flat();
  const sentence: SentenceType = {
    furigana: existing?.furigana || furigana, // keep old furigana as it might have corrections
    ...existing,
    nlp: { curtiz, ichiran, words },
  };
  upsertSentence(sentence);
}
const sentence = getSentence(plain);
if (!sentence || typeof sentence === "string")
  throw new Error("sentence not in database");
---

<style>
  .sentence-annotations {
    position: absolute;
    display: block;
    visibility: hidden;
    z-index: 1;
    background: var(--background-color);

    border: 2px solid var(--border-color);
    border-radius: 10px;
    box-shadow: 0 4px 6px var(--shadow-color);
    transition:
      background-color 0.3s,
      border-color 0.3s,
      box-shadow 0.3s;

    left: 0;
  }
  .hover-area:hover .sentence-annotations {
    visibility: visible;
  }

  .hover-area {
    display: inline-block;
  }
</style>

<div class="hover-area">
  <span class="sentence-container">
    <Sentence sentence={sentence} />
    <a href={`/edit-sentence/${plain}`}>
      {sentence.translations?.en.length ? "üìù" : "‚ùì"}
    </a>
  </span>
  <div class="sentence-annotations">
    <SentenceAnnotations sentence={sentence} />
  </div>
</div>
